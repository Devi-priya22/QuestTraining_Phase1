Object-Oriented Programming (OOP) is a programming paradigm based on the concept of "objects," which can contain data and code. Here’s a breakdown of its features, limitations, pros, and cons, along with the key concepts of inheritance, polymorphism, encapsulation, and abstraction.

 Features of OOP

1. Encapsulation: Bundling data and methods that operate on that data within a single unit (class). It restricts direct access to some components, promoting modularity and protecting the integrity of the data.

2. Abstraction: Hiding the complex reality while exposing only the necessary parts. It simplifies interactions with objects by providing a clear interface.

3. Inheritance: A mechanism for creating a new class using properties and methods of an existing class. It promotes code reusability and establishes a hierarchical relationship between classes.

4. Polymorphism: The ability of different objects to respond to the same function or method call in different ways. This can be achieved through method overriding and overloading.

Limitations of OOP

1. Complexity: OOP can lead to more complex designs, making it harder to understand the system as a whole.

2. Performance Overhead: The abstraction and encapsulation can introduce some performance overhead compared to procedural programming.

3. Learning Curve: For beginners, grasping OOP concepts can be more challenging than procedural programming.

 Pros of OOP

1. Modularity: Code can be organized into discrete objects, making it easier to manage and maintain.

2. Reusability: Through inheritance and composition, existing code can be reused, reducing redundancy.

3. Scalability: OOP designs can be easier to scale as new functionalities can be added with minimal changes to existing code.

4. Maintainability: Well-structured OOP code can be easier to maintain and update over time.

Cons of OOP

1. Overhead: Object creation and method calls can be slower than function calls in procedural programming.

2. Design Complexity: Poor design choices can lead to "spaghetti code," where the relationships between objects become tangled and hard to follow.

3. Not Always the Best Fit: For simple problems, OOP can be overkill compared to simpler paradigms like procedural programming.

 Key Concepts Explained

1. Inheritance: 
   - Allows a new class (subclass or derived class) to inherit attributes and methods from an existing class (superclass or base class).
   - Promotes code reusability and establishes a relationship between classes.

2. Polymorphism: 
   - Enables objects of different classes to be treated as objects of a common superclass. 
   - Achieved through method overriding (subclass has a different implementation of a method) and method overloading (same method name with different parameters).

3. Encapsulation: 
   - Protects an object’s internal state by restricting access to its attributes and methods. 
   - Can be achieved using access modifiers (e.g., private, public).

4. Abstraction: 
   - Simplifies complex systems by providing a simplified interface. 
   - Abstract classes and interfaces are common tools used to achieve abstraction.

